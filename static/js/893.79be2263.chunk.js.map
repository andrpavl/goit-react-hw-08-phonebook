{"version":3,"file":"static/js/893.79be2263.chunk.js","mappings":"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","sources":["redux/Contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/Contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/Contacts/selectors';\nimport css from './ContactList.module.css';\n\nexport function ContactsList() {\n  const filter = useSelector(selectFilter);\n  const onDeleteContact = id => dispatch(deleteContact(id));\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul className={css.list}>\n      {filteredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            onClick={() => onDeleteContact(contact.id)}\n            className={css.deleteBtn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/Contacts/selectors';\nimport { setFilter } from 'redux/Contacts/filterSlice';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <label htmlFor=\"name\">\n      Find contacts by name\n      <input\n        className={css.filterInput}\n        placeholder=\"Enter name\"\n        name=\"name\"\n        type=\"text\"\n        value={value}\n        onChange={handleFilterChange}\n      />\n    </label>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__J23fu\",\"label\":\"Phonebook_label__Qzztg\",\"btnAdd\":\"Phonebook_btnAdd__vfYeI\",\"input\":\"Phonebook_input__8yiEQ\",\"loader\":\"Phonebook_loader__-5wJH\"};","import { nanoid } from 'nanoid';\nimport css from './Phonebook.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/Contacts/selectors';\nimport { addContact, fetchContacts } from 'redux/Contacts/operations';\nimport Loader from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport function Phonebook() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleAddContact = (name, number) => {\n    const isInContacts = contacts.some(contact => contact.name === name);\n    if (isInContacts) {\n      return toast.warn(`${name} is already in contacts.`);\n    } else {\n      const newContact = {\n        id: nanoid(),\n        name: name,\n        number: number,\n      };\n      dispatch(addContact(newContact));\n      toast.success(`${name} added to your contacts`);\n    }\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAddContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  const nameId = nanoid();\n  const telId = nanoid();\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className={css.form}>\n        {isLoading && !error && (\n          <div className={css.loader}>\n            <Loader />\n          </div>\n        )}\n        <label htmlFor={nameId} className={css.label}>\n          Name\n          <input\n            placeholder=\"Enter name\"\n            className={css.input}\n            value={name}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={telId} className={css.label}>\n          Phone\n          <input\n            placeholder=\"Enter phone number\"\n            className={css.input}\n            onChange={handleChange}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button className={css.btnAdd} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n      <ToastContainer />\n    </div>\n  );\n}\n","import { ContactsList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\n\nexport default function Contacts() {\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <Phonebook />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactsList","useSelector","dispatch","useDispatch","filteredContacts","contact","name","toLowerCase","includes","className","css","map","number","onClick","id","deleteContact","Filter","value","htmlFor","placeholder","type","onChange","e","setFilter","target","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Phonebook","useEffect","fetchContacts","useState","setName","setNumber","handleChange","nameId","telId","onSubmit","preventDefault","some","toast","newContact","addContact","handleAddContact","Loader","pattern","title","required","Contacts"],"sourceRoot":""}